

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

// *_Nonnull is ignored by cinterop
typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that the foreign language executes
// TODO why would that be nullable?
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable);

// Callback to execute Rust tasks using a foreign language Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef void (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H
typedef void (*UniFfiFutureCallbackUInt8)(const void * _Nonnull, uint8_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackInt8)(const void * _Nonnull, int8_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackInt32)(const void * _Nonnull, int32_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackInt64)(const void * _Nonnull, int64_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarCrypto)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarEcdh1PU)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarEcdhEs)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarLocalKey)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarScan)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarSession)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarStore)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrAskarStoreManager)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrEncryptedBuffer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustArcPtrLocalKeyFactory)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);

// Scaffolding functions
void uniffi_aries_askar_fn_free_askarentry(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarentry_category(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarentry_name(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarentry_tags(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarentry_value(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarkeyentry(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarkeyentry_algorithm(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarkeyentry_metadata(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarkeyentry_name(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_aries_askar_fn_method_askarkeyentry_is_local(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarkeyentry_tags(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarkeyentry_load_local_key(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarscan(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarscan_next(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarscan_fetch_all(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarsession(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_close(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_count(void*_Nonnull ptr, RustBuffer category, RustBuffer tag_filter, size_t uniffi_executor, UniFfiFutureCallbackInt64 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_fetch(void*_Nonnull ptr, RustBuffer category, RustBuffer name, int8_t for_update, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_fetch_all(void*_Nonnull ptr, RustBuffer category, RustBuffer tag_filter, RustBuffer limit, int8_t for_update, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_update(void*_Nonnull ptr, RustBuffer operation, RustBuffer category, RustBuffer name, RustBuffer value, RustBuffer tags, RustBuffer expiry_ms, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_remove_all(void*_Nonnull ptr, RustBuffer category, RustBuffer tag_filter, size_t uniffi_executor, UniFfiFutureCallbackInt64 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_insert_key(void*_Nonnull ptr, RustBuffer name, void*_Nonnull key, RustBuffer metadata, RustBuffer tags, RustBuffer expiry_ms, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_fetch_key(void*_Nonnull ptr, RustBuffer name, int8_t for_update, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_fetch_all_keys(void*_Nonnull ptr, RustBuffer algorithm, RustBuffer thumbprint, RustBuffer tag_filter, RustBuffer limit, int8_t for_update, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_remove_key(void*_Nonnull ptr, RustBuffer name, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarsession_update_key(void*_Nonnull ptr, RustBuffer name, RustBuffer metadata, RustBuffer tags, RustBuffer expiry_ms, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarstore(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_get_profile_name(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_create_profile(void*_Nonnull ptr, RustBuffer profile, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_remove_profile(void*_Nonnull ptr, RustBuffer profile, size_t uniffi_executor, UniFfiFutureCallbackInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_rekey(void*_Nonnull ptr, RustBuffer key_method, RustBuffer pass_key, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_close(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_scan(void*_Nonnull ptr, RustBuffer profile, RustBuffer categogy, RustBuffer tag_filter, RustBuffer offset, RustBuffer limit, size_t uniffi_executor, UniFfiFutureCallbackRustArcPtrAskarScan _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstore_session(void*_Nonnull ptr, RustBuffer profile, size_t uniffi_executor, UniFfiFutureCallbackRustArcPtrAskarSession _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarlocalkey(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_public_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_secret_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarlocalkey_to_key_exchange(void*_Nonnull ptr, RustBuffer alg, void*_Nonnull pk, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_algorithm(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_jwk_public(void*_Nonnull ptr, RustBuffer alg, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_jwk_secret(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_jwk_thumbprint(void*_Nonnull ptr, RustBuffer alg, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_to_jwk_thumbprints(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarlocalkey_convert_key(void*_Nonnull ptr, RustBuffer alg, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_aead_params(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int32_t uniffi_aries_askar_fn_method_askarlocalkey_aead_padding(void*_Nonnull ptr, int32_t msg_len, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_aead_random_nonce(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarlocalkey_aead_encrypt(void*_Nonnull ptr, RustBuffer message, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_aead_decrypt(void*_Nonnull ptr, RustBuffer ciphertext, RustBuffer tag, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarlocalkey_sign_message(void*_Nonnull ptr, RustBuffer message, RustBuffer sig_type, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_aries_askar_fn_method_askarlocalkey_verify_signature(void*_Nonnull ptr, RustBuffer message, RustBuffer signature, RustBuffer sig_type, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarlocalkey_wrap_key(void*_Nonnull ptr, void*_Nonnull key, RustBuffer nonce, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarlocalkey_unwrap_key(void*_Nonnull ptr, RustBuffer alg, RustBuffer ciphertext, RustBuffer tag, RustBuffer nonce, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_encryptedbuffer(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_encryptedbuffer_ciphertext(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_encryptedbuffer_nonce(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_encryptedbuffer_tag(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_encryptedbuffer_ciphertext_tag(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_localkeyfactory(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_constructor_localkeyfactory_new(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_generate(void*_Nonnull ptr, RustBuffer alg, int8_t ephemeral, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_from_seed(void*_Nonnull ptr, RustBuffer alg, RustBuffer seed, RustBuffer method, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_from_jwk_slice(void*_Nonnull ptr, RustBuffer jwk, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_from_jwk(void*_Nonnull ptr, RustBuffer jwk, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_from_public_bytes(void*_Nonnull ptr, RustBuffer alg, RustBuffer bytes, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_localkeyfactory_from_secret_bytes(void*_Nonnull ptr, RustBuffer alg, RustBuffer bytes, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarstoremanager(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_constructor_askarstoremanager_new(RustCallStatus *_Nonnull out_status
    
);
RustBuffer uniffi_aries_askar_fn_method_askarstoremanager_generate_raw_store_key(void*_Nonnull ptr, RustBuffer seed, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstoremanager_set_default_logger(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstoremanager_provision(void*_Nonnull ptr, RustBuffer spec_uri, RustBuffer key_method, RustBuffer pass_key, RustBuffer profile, int8_t recreate, size_t uniffi_executor, UniFfiFutureCallbackRustArcPtrAskarStore _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstoremanager_open(void*_Nonnull ptr, RustBuffer spec_uri, RustBuffer key_method, RustBuffer pass_key, RustBuffer profile, size_t uniffi_executor, UniFfiFutureCallbackRustArcPtrAskarStore _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_method_askarstoremanager_remove(void*_Nonnull ptr, RustBuffer spec_uri, size_t uniffi_executor, UniFfiFutureCallbackInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarcrypto(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_constructor_askarcrypto_new(RustCallStatus *_Nonnull out_status
    
);
RustBuffer uniffi_aries_askar_fn_method_askarcrypto_random_nonce(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarcrypto_crypto_box(void*_Nonnull ptr, void*_Nonnull receiver_key, void*_Nonnull sender_key, RustBuffer message, RustBuffer nonce, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarcrypto_box_open(void*_Nonnull ptr, void*_Nonnull receiver_key, void*_Nonnull sender_key, RustBuffer message, RustBuffer nonce, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarcrypto_box_seal(void*_Nonnull ptr, void*_Nonnull receiver_key, RustBuffer message, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarcrypto_box_seal_open(void*_Nonnull ptr, void*_Nonnull receiver_key, RustBuffer ciphertext, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarecdhes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_constructor_askarecdhes_new(RustBuffer alg_id, RustBuffer apu, RustBuffer apv, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdhes_derive_key(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull receiver_key, int8_t receive, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdhes_encrypt_direct(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull receiver_key, RustBuffer message, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarecdhes_decrypt_direct(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull receiver_key, RustBuffer ciphertext, RustBuffer tag, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdhes_sender_wrap_key(void*_Nonnull ptr, RustBuffer wrap_alg, void*_Nonnull ephemeral_key, void*_Nonnull receiver_key, void*_Nonnull cek, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdhes_receiver_unwrap_key(void*_Nonnull ptr, RustBuffer wrap_alg, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull receiver_key, RustBuffer ciphertext, RustBuffer nonce, RustBuffer tag, RustCallStatus *_Nonnull out_status
);
void uniffi_aries_askar_fn_free_askarecdh1pu(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_constructor_askarecdh1pu_new(RustBuffer alg_id, RustBuffer apu, RustBuffer apv, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdh1pu_derive_key(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull sender_key, void*_Nonnull receiver_key, RustBuffer cc_tag, int8_t receive, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdh1pu_encrypt_direct(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull sender_key, void*_Nonnull receiver_key, RustBuffer message, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aries_askar_fn_method_askarecdh1pu_decrypt_direct(void*_Nonnull ptr, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull sender_key, void*_Nonnull receiver_key, RustBuffer ciphertext, RustBuffer tag, RustBuffer nonce, RustBuffer aad, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdh1pu_sender_wrap_key(void*_Nonnull ptr, RustBuffer wrap_alg, void*_Nonnull ephemeral_key, void*_Nonnull sender_key, void*_Nonnull receiver_key, void*_Nonnull cek, RustBuffer cc_tag, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_aries_askar_fn_method_askarecdh1pu_receiver_unwrap_key(void*_Nonnull ptr, RustBuffer wrap_alg, RustBuffer enc_alg, void*_Nonnull ephemeral_key, void*_Nonnull sender_key, void*_Nonnull receiver_key, RustBuffer ciphertext, RustBuffer cc_tag, RustBuffer nonce, RustBuffer tag, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aries_askar_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aries_askar_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_aries_askar_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aries_askar_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_aries_askar_checksum_method_askarentry_category(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarentry_name(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarentry_tags(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarentry_value(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_algorithm(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_metadata(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_name(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_is_local(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_tags(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarkeyentry_load_local_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarscan_next(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarscan_fetch_all(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_close(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_count(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_fetch(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_fetch_all(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_update(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_remove_all(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_insert_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_fetch_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_fetch_all_keys(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_remove_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarsession_update_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_get_profile_name(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_create_profile(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_remove_profile(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_rekey(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_close(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_scan(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstore_session(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_public_bytes(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_secret_bytes(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_key_exchange(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_algorithm(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_jwk_public(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_jwk_secret(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_jwk_thumbprint(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_to_jwk_thumbprints(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_convert_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_aead_params(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_aead_padding(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_aead_random_nonce(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_aead_encrypt(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_aead_decrypt(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_sign_message(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_verify_signature(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_wrap_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarlocalkey_unwrap_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_encryptedbuffer_ciphertext(void
    
);
uint16_t uniffi_aries_askar_checksum_method_encryptedbuffer_nonce(void
    
);
uint16_t uniffi_aries_askar_checksum_method_encryptedbuffer_tag(void
    
);
uint16_t uniffi_aries_askar_checksum_method_encryptedbuffer_ciphertext_tag(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_generate(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_from_seed(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_from_jwk_slice(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_from_jwk(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_from_public_bytes(void
    
);
uint16_t uniffi_aries_askar_checksum_method_localkeyfactory_from_secret_bytes(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstoremanager_generate_raw_store_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstoremanager_set_default_logger(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstoremanager_provision(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstoremanager_open(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarstoremanager_remove(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarcrypto_random_nonce(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarcrypto_crypto_box(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarcrypto_box_open(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarcrypto_box_seal(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarcrypto_box_seal_open(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdhes_derive_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdhes_encrypt_direct(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdhes_decrypt_direct(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdhes_sender_wrap_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdhes_receiver_unwrap_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdh1pu_derive_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdh1pu_encrypt_direct(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdh1pu_decrypt_direct(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdh1pu_sender_wrap_key(void
    
);
uint16_t uniffi_aries_askar_checksum_method_askarecdh1pu_receiver_unwrap_key(void
    
);
uint16_t uniffi__checksum_constructor_localkeyfactory_new(void
    
);
uint16_t uniffi__checksum_constructor_askarstoremanager_new(void
    
);
uint16_t uniffi__checksum_constructor_askarcrypto_new(void
    
);
uint16_t uniffi__checksum_constructor_askarecdhes_new(void
    
);
uint16_t uniffi__checksum_constructor_askarecdh1pu_new(void
    
);
void uniffi_foreign_executor_callback_set(UniFfiForeignExecutorCallback _Nonnull callback
);
uint32_t ffi_aries_askar_uniffi_contract_version(void
    
);